{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/12/24/hello-world/"},{"title":"안녕하세요hexo","text":"테스트 제목안녕하세요 hexo 새글을 쓴다 터미널에서 “hexo generate” 터미널에서 “hexo deploy” 블로그를 확인한다!","link":"/2019/12/24/%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94hexo/"},{"title":"주사위굴리기_14499번","text":"14499번 문제 풀이 주사위가 좌표면을 움직일때마다 윗면에 쓰여있는 숫자를 출력하는 문제이다. 1.규칙에 따라 주사위와 좌표면의 숫자들이 바뀌므로 바뀌는 주사위 면의 숫자들을 저장하고자 했다. &nbsp;&nbsp;&nbsp;따라서, 아래와 같이 dice라는 리스트를 주사위값 저장에 사용했다. 1dice = [0,0,0,0,0,0] #위0 아래1 동2 서3 남4 북5 순서로 값 2.주사위가 움직이는 지도가 어떻게 생겼는지를 알아야했다. &nbsp;&nbsp;&nbsp;따라서, 아래와 같이 입력받은 크기에 맞는 지도를 생성했다. 12345field = []for row in range(rows): li = list(map(int, input().split())) field.append(li) 3.주어지는 움직임대로 주사위를 움직이고 그에따라 지도의 값과 dice의 값을 바꿔주어야한다. 123456789101112131415161718192021for i in range(len(moves)): temp = 0 if moves[i] == 1: if position_y + 1 &lt; columns: position_y += 1 temp = dice[2] field_num = field[position_x][position_y] if field_num == 0: dice[2] = dice[0] dice[0] = dice[3] dice[3] = dice[1] dice[1] = temp field[position_x][position_y] = temp else: dice[2] = dice[0] dice[0] = dice[3] dice[3] = dice[1] dice[1] = field[position_x][position_y] field[position_x][position_y] = 0 else : continue 주사위가 특정 방향으로 움직이기전에, temp값에 바닥을 향할 주사위 값을 미리 저장해주었다. 그리고 주사위가 움직일때, 현재 좌표값들을 변경시켜준다. 이때 주의할점은 우리는 문제에서 값을 입력받을때 세로크기를 먼저받고 그 다음으로 가로 크기를 받는다는 점이다. 즉 동쪽으로 움직이면 y좌표가 늘어난다. 주사위가 굴렀다면, dice 리스트에 값들을 바꿔줘야한다. 위와같이 동쪽으로 굴렀다면, 위를 바라보던 주사위 면은 동쪽을 바라보게 될테고 서쪽을 바라보던 주사위면은 위를 바라보게 될 것이다. 이와 같이 주사위 면의 값들을 dice에 바꿔서 입력한다. 이 과정을 동,서,남,북에 나눠서 처리하고 그때마다 주사위 윗면의 값을 프린트해주면 된다. Full CodeFull Code","link":"/2019/12/27/%EC%A3%BC%EC%82%AC%EC%9C%84%EA%B5%B4%EB%A6%AC%EA%B8%B0-14499%EB%B2%88/"},{"title":"Centauri","text":"[Python] 백준1011번 풀이Fly me to the Alpha Centauri1.거리에 따른 이동 규칙을 찾는 문제였다. 마지막 거리1을 제외한 나머지 거리를 역으로 탐색하는 방법을 생각했지만 규칙성을 찾아서 해결하는 문제에 옳지 못한 방법이었다.&nbsp;&nbsp;&nbsp;타 게시판에서 힌트를 찾을 수 있었는데, 일정 거리를 지속적으로 늘려가다가 결국 마지막 1광년을 가기 위해 어느 시점부터 다시 지속적으로 움직이는 거리를 줄여야 한다는것이다. 2.그렇다면 어느 시점부터 다시 움직이는 거리를 줄이는 것일까?&nbsp;&nbsp;&nbsp;이에 대한 해답은 총 이동거리에 따라서 어떻게 움직여야하는지 표를 그려 파악할 수 있었다. 거리 이동경로 움직인 횟수 1 1 1 2 1 1 2 3 1 1 1 3 4 1 2 1 3 5 1 2 1 1 4 6 1 2 2 1 4 7 1 2 2 1 1 5 8 1 2 2 2 1 5 9 1 2 3 2 1 5 10 1 2 3 2 1 1 6 11 1 2 3 2 2 1 6 12 1 2 3 3 2 1 6 13 1 2 3 3 2 1 1 7 14 1 2 3 3 2 2 1 7 15 1 2 3 3 3 2 1 7 16 1 2 3 4 3 2 1 7 17 1 2 3 4 3 2 1 1 8 18 1 2 3 4 3 2 2 1 8 19 1 2 3 4 3 3 2 1 8 20 1 2 3 4 3 3 2 1 8 21 1 2 3 4 4 3 2 1 1 9 3.위의 표를 살펴보면 제곱수가 되는 X(볼드체가 표시되어 있는 2,3,4….) 를 기준으로 움직인 회수가 바뀌는것을 확인할 수 있다.&nbsp;&nbsp;&nbsp;다시말해, 우리가 움직여야하는 거리가 주어졌을 때 가장 가까운 제곱수로 나타낼 수 있는 값 K를 찾아야한다. 12345x, y = map(int, input().split())stand = 0if math.sqrt(y-x) - math.floor(math.sqrt(y-x)) &lt; 0.5: stand = math.floor(math.sqrt(y-x))else: stand = math.ceil(math.sqrt(y-x)) 총 움직여야하는 거리 y-x 에 대해&nbsp;&nbsp;&nbsp;sqrt값과 sqrt의 floor값 차이를 구해 이 값이 0.5 보다 작다면 기준이 되는 K값(위의 코드에서는 stand값)은 sqrt의 floor값이라고 할 수 있다.반대로, 0.5보다 크다면 K값은 sqrt의 ceil값이 될 것이다. 4.기준이 되는 값 K를 구했다면 K와 움직인 횟수와의 관계를 살펴봐야 한다.&nbsp;&nbsp;&nbsp;우리가 움직인 거리와 K의 제곱값을 비교하면 알 수 있다.&nbsp;&nbsp;&nbsp;만약, y-x가 K의 제곱보다 크다면 움직인 횟수는 K2이며&nbsp;&nbsp;&nbsp;y-x가 k의 제곱보다 작거나 같다면 움직인 횟수는 k2-1의 규칙을 따르는 것을 확인할 수 있다. 1234if y-x &gt; stand**2: print(stand*2)elif y-x &lt;= stand**2: print(stand*2-1) Full codeFull code","link":"/2019/12/30/Fly%20me%20to%20the%20Alpha%20Centauri/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"baekjoon","slug":"baekjoon","link":"/tags/baekjoon/"}],"categories":[{"name":"baekjoon","slug":"baekjoon","link":"/categories/baekjoon/"},{"name":"python","slug":"baekjoon/python","link":"/categories/baekjoon/python/"}]}